/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package recipes_xml_java_reader;

import java.io.File;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import org.w3c.dom.Node;
import org.w3c.dom.NodeList;


/**
 *
 * @author Jeff_2
 */
public class RecipesReader extends javax.swing.JFrame {

    /**
     * Creates new form RecipesReader
     */
    public RecipesReader() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaRecipe = new javax.swing.JTextArea();
        jButtonNext = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextAreaRecipe.setColumns(20);
        jTextAreaRecipe.setRows(5);
        jScrollPane1.setViewportView(jTextAreaRecipe);

        jButtonNext.setText("Next");
        jButtonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(313, 313, 313)
                .addComponent(jButtonNext)
                .addContainerGap(346, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jButtonNext)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    int count=1;
    private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed
        // TODO add your handling code here:
        jTextAreaRecipe.setText(getRecipe(count));
        count++;
    }//GEN-LAST:event_jButtonNextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RecipesReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RecipesReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RecipesReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RecipesReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RecipesReader().setVisible(true);
                
                try{
                    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
                    
                    DocumentBuilder builder=factory.newDocumentBuilder();
                    
                    Document document=builder.parse(new File("c:\\javaIO\\recipes.xml"));
                    
                    Node root=document.getDocumentElement();
                    
                    NodeList initialRecipes=root.getChildNodes();//root's childNodes contain 1 description, 24 recipes and 26 "#text", which I don't know where come from.
                    //System.out.println(recipes.getLength());//51
                    Node currentNode;
                    
                    for (int i=0; i<initialRecipes.getLength(); i++){
                        currentNode=initialRecipes.item(i);//loop through the above 51 childNodes
                        
                        if(currentNode.getNodeName()!="recipe"){//remove any non recipe childNodes
                            
                            root.removeChild(currentNode);
                        }
                        
                       
                        
                    }
                    recipes=root.getChildNodes();//get a new NodeList containing all the recipes
                    System.out.println(recipes.getLength());//25
                    
                }catch(Exception e){
                    
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonNext;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaRecipe;
    // End of variables declaration//GEN-END:variables

    static NodeList recipes;
    
    
    String getRecipe(int index){
        String txtRecipe="";
        System.out.println(index);
        Node recipe=recipes.item(index);
        NodeList recipeContents=recipe.getChildNodes();//get the childNodes of a single recipe
        for(int i=0; i<recipeContents.getLength();i++){//loop throuth the childNodes of a single recipe
            Node recipeContent=recipeContents.item(i);
            
            if(recipeContent.hasAttributes()){//if the childNodes has attributes, read the content of attributes
                Element ele=(Element)recipeContent;
                txtRecipe+=ele.getAttributeNode("name")+":"+ele.getAttribute("name")+
                        "\n"+ele.getAttributeNode("amount")+ele.getAttribute("amount")+
                        "\n"+ele.getAttributeNode("unit")+ele.getAttribute("unit")+"\n";
                //ele.ge
                
            }
            if(recipeContent.hasChildNodes()){//read the text content of every single recipe childNode
                txtRecipe+=recipeContent.getNodeName()+": "+recipeContent.getTextContent()+"\n";
            }
        }
              
        return txtRecipe;
    }
    



}
